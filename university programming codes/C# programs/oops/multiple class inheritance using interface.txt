// c# doesnot support multiple class inheritance..
// this ambiguity is called diamond problem...

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace consoleui
{
    class A
    {
        public virtual void print()
        {
            Console.WriteLine("A implementation");
        }
    }

    class B : A
    {
        public override void print()
        {
            Console.WriteLine("B implementation");
        }
    }

    class C : A
    {
        public override void print()
        {
            Console.WriteLine("C implementation");
        }
    }

    class D : B, C
    {
      // there is no overiden function and D class is inherit from B and C so which overiden function should be called ??  
    }

    class Program
    {
        static void Main(string[] args)
        {
            D d1 = new D();
            d1.print();

            Console.ReadKey();
        }
    }
}

xxx=============================================================================================xxx


vusing System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace consoleui
{
    interface iA  // solution of this problem multiple class inheritance using interface.. 
    {
        void Amethod();
    }

    class A : iA
    {
        public void Amethod()
        {
            Console.WriteLine("A method");
        }
    }

    interface iB 
    {
        void Bmethod();
    }

    class B : iB
    {
        public void Bmethod()
        {
            Console.WriteLine("B method");
        }
    }

    class AB : iA, iB
    {
        A a1 = new A();
        B b1 = new B();

        public void Amethod()
        {
            a1.Amethod();
        }

        public void Bmethod()
        {
            b1.Bmethod();
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            AB ab = new AB();
            ab.Amethod();
            ab.Bmethod();

            Console.ReadKey();
        }
    }
}